; (function (c, d) { var e = { my$: function (a) { return document.getElementById(a) }, getRandom: function (a, b) { a = Math.ceil(a); b = Math.floor(b); return Math.floor(Math.random() * (b - a + 1)) + a }, colorRandom: function () { var r = this.getRandom(0, 255); var g = this.getRandom(0, 255); var b = this.getRandom(0, 255); return "rgb(" + r + "," + g + "," + b + ")" } }; c.Tools = e })(window, undefined); (function (a, b) { class Food { constructor(option) { option = option instanceof Object ? option : {}; this.width = option.width || 20; this.height = option.height || 20; this.color = option.color || "green"; this.x = option.x || 0; this.y = option.y || 0; this.elements = [] } render(map) { var c = document.createElement("div"); this.x = Tools.getRandom(0, map.clientWidth / this.width - 1) * this.width; this.y = Tools.getRandom(0, map.clientHeight / this.height - 1) * this.height; this.c = Tools.colorRandom(); c.style.width = this.width + "px"; c.style.height = this.height + "px"; c.style.backgroundColor = this.c; c.style.left = this.x + "px"; c.style.top = this.y + "px"; c.style.position = "absolute"; map.appendChild(c); this.elements.push(c) } remove(map, i) { map.removeChild(this.elements[i]); this.elements.splice(i, 1) } } a.Food = Food })(window, undefined); (function (a, b) { class Snake { constructor(option) { option = option instanceof Object ? option : {}; this.width = option.width || 20; this.height = option.height || 20; this.body = [{ x: 3, y: 2, color: "red" }, { x: 2, y: 2, color: "blue" }, { x: 1, y: 2, color: "blue" }]; this.direction = "right"; this.elements = [] } render(map) { for (var i = 0, len = this.body.length; i < len; i++) { var c = this.body[i]; var d = document.createElement("div"); d.style.width = this.width + "px"; d.style.height = this.height + "px"; d.style.backgroundColor = c.color; d.style.left = c.x * this.width + "px"; d.style.top = c.y * this.height + "px"; d.style.position = "absolute"; map.appendChild(d); this.elements.push(d) } } move() { for (var i = this.body.length - 1; i > 0; i--) { this.body[i].x = this.body[i - 1].x; this.body[i].y = this.body[i - 1].y } var e = this.body[0]; switch (this.direction) { case "right": e.x++; break; case "left": e.x--; break; case "top": e.y--; break; case "bottom": e.y++ } } remove(map) { for (var i = this.elements.length - 1; i >= 0; i--) { map.removeChild(this.elements[i]) } this.elements = [] } } a.Snake = Snake })(window, undefined); (function (j, k) { var l; class Game { constructor(map) { this.map = map; this.food = new Food(); this.snake = new Snake(); l = this } start() { this.snake.render(this.map); this.food.render(this.map); this.food.render(this.map); this.food.render(this.map); runSnake(); bindKey() } } function runSnake() { var h = setInterval(function () { l.snake.move(); l.snake.remove(l.map); l.snake.render(l.map); var a = l.map.offsetWidth / l.snake.width; var b = l.map.offsetHeight / l.snake.height; var c = l.snake.body[0].x; var d = l.snake.body[0].y; var e = c * l.snake.width; var f = d * l.snake.height; for (var i = 0; i < l.food.elements.length; i++) { if (l.food.elements[i].offsetLeft === e && l.food.elements[i].offsetTop === f) { l.food.remove(l.map, i); l.food.render(l.map); var g = l.snake.body[l.snake.body.length - 1]; l.snake.body.push({ x: g.x, y: g.y, color: g.color }) } } if (c < 0 || c >= a || d < 0 || d >= b) { clearInterval(h); alert("Game over") } }, 150) } function bindKey() { document.onkeydown = function (e) { switch (e.keyCode) { case 37: l.snake.direction = "left"; break; case 38: l.snake.direction = "top"; break; case 39: l.snake.direction = "right"; break; case 40: l.snake.direction = "bottom"; break } } } j.Game = Game })(window, undefined); (function (a, b) { var c = Tools.my$("map"); var d = new Game(c); d.start() })(window, undefined)